name: Boundary Condition Generation

on:
  push:
  workflow_dispatch:

jobs:
  generate-boundary-conditions:
    runs-on: ubuntu-latest
    steps:

      # ‚úÖ 1Ô∏è‚É£ Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ‚úÖ 2Ô∏è‚É£ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # ‚úÖ 3Ô∏è‚É£ Install Dependencies
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # NEW: Add the 'src' directory to Python's PATH
      - name: Add src to Python Path
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE/src:$PYTHONPATH" >> $GITHUB_ENV

      # ‚úÖ 4Ô∏è‚É£ Grant Execution Permissions for Dropbox Shell Script
      - name: Make `download_from_dropbox.sh` Executable
        run: chmod +x src/download_from_dropbox.sh

      # ‚úÖ 5Ô∏è‚É£ Run Dropbox Shell Script to Fetch Files
      - name: Download Simulation Files from Dropbox
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: src/download_from_dropbox.sh

      # ‚úÖ 6Ô∏è‚É£ Verify Downloaded Files Exist (Programmatic Check)
      - name: Verify File Existence
        run: |
          if [ -f downloaded_simulation_files/simulation_mesh.obj ] && [ -f downloaded_simulation_files/fluid_simulation_input.json ]; then
            echo "‚úÖ Both simulation_mesh.obj and fluid_simulation_input.json were downloaded successfully."
          else
            echo "‚ùå ERROR: One or both of the required files were not found!"
            exit 1 # Stop the workflow if files are missing
          fi

      # ‚úÖ 7Ô∏è‚É£ Delete Previous `boundary_conditions.json` If Exists
      - name: Delete Previous Boundary Conditions JSON
        run: |
          if [ -f downloaded_simulation_files/boundary_conditions.json ]; then
            rm downloaded_simulation_files/boundary_conditions.json
            echo "üóëÔ∏è Deleted previous boundary_conditions.json file."
          else
            echo "‚ÑπÔ∏è No previous boundary_conditions.json found‚Äîproceeding with new generation."
          fi

      # ‚úÖ 8Ô∏è‚É£ Run Boundary Conditions Script (Assuming it uses both files)
      - name: Generate Boundary Conditions
        # We need to change the working directory to `src` for the direct import to work easily,
        # or adjust the script's internal paths to be absolute from GITHUB_WORKSPACE.
        # Changing working directory is usually cleaner for scripts.
        working-directory: ./src
        run: python boundary_conditions.py ../downloaded_simulation_files/simulation_mesh.obj ../downloaded_simulation_files/fluid_simulation_input.json

      # ‚úÖ 9Ô∏è‚É£ Debug Generated Files (Verify Output File Exists)
      - name: Debug Generated Files
        # Note: 'downloaded_simulation_files/' is now relative to the root, not 'src'
        # So we need to go up one level from 'src'
        run: ls -l ../downloaded_simulation_files/

      # ‚úÖ 1Ô∏è‚É£0Ô∏è‚É£ Validate `boundary_conditions.json` Formatting
      - name: Check JSON Formatting
        run: |
          if [ -f downloaded_simulation_files/boundary_conditions.json ]; then
            python -c "import json; f = open('downloaded_simulation_files/boundary_conditions.json'); json.load(f); f.close()"
            echo "‚úÖ JSON formatting is valid."
          else
            echo "‚ùå ERROR: boundary_conditions.json was not generated!"
            exit 1
          fi

      # ‚úÖ 1Ô∏è‚É£1Ô∏è‚É£ Run Unit & Integration Tests AFTER Boundary Conditions Generation
      - name: Run unit tests
        run: pytest tests/test_unit_validation.py --verbose

      - name: Run integration tests
        run: pytest tests/test_integration_validation.py --verbose

      # ‚úÖ 1Ô∏è‚É£2Ô∏è‚É£ Commit and Push Updated JSON File (Only If Tests Passed)
      - name: Commit and Push Boundary Conditions JSON
        if: success()
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        run: |
          git config --global user.name "$GIT_USER_NAME"
          git config --global user.email "$GIT_USER_EMAIL"

          # Verify file exists before adding
          if [ ! -f downloaded_simulation_files/boundary_conditions.json ]; then
            echo "‚ùå ERROR: boundary_conditions.json is missing. Skipping commit."
            exit 1
          fi

          # Check if there are actual changes
          if git diff --quiet && git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No changes to commit. Skipping push."
          else
            git add downloaded_simulation_files/boundary_conditions.json
            git commit -m "Auto-update: Passed tests and updated boundary conditions JSON file"
            git push origin HEAD
          fi
