name: Boundary Condition Generation

on:
  push:
  workflow_dispatch:

jobs:
  generate-boundary-conditions:
    runs-on: ubuntu-latest
    steps:

      # ‚úÖ 1Ô∏è‚É£ Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ‚úÖ 2Ô∏è‚É£ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # ‚úÖ 3Ô∏è‚É£ Install Dependencies
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # ‚úÖ 4Ô∏è‚É£ Grant Execution Permissions for Dropbox Shell Script (Download)
      - name: Make `download_from_dropbox.sh` Executable
        run: chmod +x src/download_from_dropbox.sh

      # ‚úÖ 5Ô∏è‚É£ Run Dropbox Shell Script to Fetch Files
      - name: Download Simulation Files from Dropbox
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: src/download_from_dropbox.sh

      # ‚úÖ 6Ô∏è‚É£ Verify Downloaded Files Exist (Programmatic Check)
      - name: Verify File Existence
        run: |
          if [ -f $GITHUB_WORKSPACE/downloaded_simulation_files/simulation_mesh.json ] && [ -f $GITHUB_WORKSPACE/downloaded_simulation_files/initial_data.json ]; then
            echo "‚úÖ Both simulation_mesh.json and initial_data.json were downloaded successfully."
          else
            echo "‚ùå ERROR: One or both of the required files were not found!"
            exit 1
          fi

      # ‚úÖ 7Ô∏è‚É£ Delete Previous `fluid_simulation_input.json` If Exists
      - name: Delete Previous Fluid Simulation Input JSON
        run: |
          if [ -f $GITHUB_WORKSPACE/downloaded_simulation_files/fluid_simulation_input.json ]; then
            rm $GITHUB_WORKSPACE/downloaded_simulation_files/fluid_simulation_input.json
            echo "üóëÔ∏è Deleted previous fluid_simulation_input.json file."
          else
            echo "‚ÑπÔ∏è No previous fluid_simulation_input.json found‚Äîproceeding with new generation."
          fi

      # ‚úÖ 8Ô∏è‚É£ Run JSON Merge Script
      - name: Merge JSON Files
        working-directory: ./src
        run: python merge_json_files.py $GITHUB_WORKSPACE/downloaded_simulation_files/simulation_mesh.json $GITHUB_WORKSPACE/downloaded_simulation_files/initial_data.json $GITHUB_WORKSPACE/downloaded_simulation_files/fluid_simulation_input.json

      # ‚úÖ Debug: List Directory Before Verifying Output Files
      - name: Debug Directory Structure Before Verification
        run: ls -R $GITHUB_WORKSPACE

      # ‚úÖ 9Ô∏è‚É£ Debug Generated Files (Verify Output File Exists)
      - name: Debug Generated Files
        run: ls -l $GITHUB_WORKSPACE/downloaded_simulation_files/

      # ‚úÖ üîü Run Unit and Integration Tests (Commented Out)
      # - name: Run Tests
      #   run: |
      #     python -m unittest discover -s tests -p "*.py"

      # ‚úÖ 1Ô∏è‚É£1Ô∏è‚É£ Grant Execution Permissions for Dropbox Shell Script (Upload)
      - name: Make `upload_to_dropbox.sh` Executable
        run: chmod +x src/upload_to_dropbox.sh

      # ‚úÖ üîç Debugging Step BEFORE Uploading to Dropbox
      - name: Debug Before Dropbox Upload
        run: |
          echo "üîç Checking directory structure before upload..."
          ls -R $GITHUB_WORKSPACE

      # ‚úÖ 1Ô∏è‚É£2Ô∏è‚É£ Upload Generated Output File to Dropbox
      - name: Upload Fluid Simulation Input to Dropbox
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: src/upload_to_dropbox.sh
