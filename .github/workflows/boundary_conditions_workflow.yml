name: Boundary Condition Generation

on:
  push:
  workflow_dispatch:

jobs:
  generate-boundary-conditions:
    runs-on: ubuntu-latest
    steps:

      # 1️⃣ Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2️⃣ Install Dependencies (Fix Missing `pyvista`)
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyvista numpy meshio jsonschema pytest

      # 3️⃣ Run Unit Tests to Validate Setup & Configuration
      - name: Run Unit Tests First
        run: |
          python -m unittest test_boundary_conditions.py || { echo "❌ Unit tests failed. Stopping workflow."; exit 1; }

      # 4️⃣ Validate `boundary_conditions.json` Formatting (Only If Tests Passed)
      - name: Check JSON Formatting
        if: success()
        run: |
          python -c "import json; f = open('testing-input-output/boundary_conditions.json'); json.load(f); f.close()"
          echo "✅ JSON formatting is valid."

      # 5️⃣ Verify `.obj` File Exists (Only If Tests Passed)
      - name: Check `testing-Body.obj`
        if: success()
        run: ls -l ./testing-input-output/

      # 6️⃣ Run Boundary Conditions Script (Only If Tests Passed)
      - name: Generate Boundary Conditions
        if: success()
        run: python boundary_conditions.py ./testing-input-output/testing-Body.obj

      # 7️⃣ Verify `boundary_conditions.json` Creation (Only If Tests Passed)
      - name: Check Output
        if: success()
        run: ls -l ./testing-input-output/

      # 8️⃣ Commit and Push `boundary_conditions.json` to Repository (Only If Tests Passed)
      - name: Commit and Push Boundary Conditions JSON
        if: success()
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        run: |
          git config --global user.name "$GIT_USER_NAME"
          git config --global user.email "$GIT_USER_EMAIL"

          # Check if there are changes to commit
          if git diff --quiet && git diff --staged --quiet; then
            echo "ℹ️ No changes to commit. Skipping push."
          else
            git add testing-input-output/boundary_conditions.json
            git commit -m "Auto-update: Passed unit tests and updated boundary conditions JSON file"
            git push origin HEAD
          fi
