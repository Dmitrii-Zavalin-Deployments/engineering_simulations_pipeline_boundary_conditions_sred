#!/bin/bash

# Set environment variables from GitHub Actions secrets
APP_KEY="${APP_KEY}"         # Dropbox App Key (Client ID)
APP_SECRET="${APP_SECRET}"   # Dropbox App Secret (Client Secret)
REFRESH_TOKEN="${REFRESH_TOKEN}" # Dropbox Refresh Token

# Define the local path of the file generated by the first script
# This path should match where your fluid simulation script saves the output.
# Based on your Python script, it's in the '../downloaded_simulation_files/' directory
LOCAL_OUTPUT_FILE_PATH="../downloaded_simulation_files/boundary_conditions.json"

# Define the Dropbox folder where the output file should be uploaded
# It's good practice to have a dedicated folder for outputs.
DROPBOX_UPLOAD_FOLDER="/engineering_simulations_pipeline/outputs"

# --- Run the Python script to upload the boundary_conditions.json file ---
# The Python script (your second script) takes:
# 1. local_file_to_upload
# 2. dropbox_folder
# 3. refresh_token
# 4. client_id (APP_KEY)
# 5. client_secret (APP_SECRET)

echo "üîÑ Attempting to upload ${LOCAL_OUTPUT_FILE_PATH} to Dropbox folder ${DROPBOX_UPLOAD_FOLDER}..."

# Execute the Python script for uploading
# Assuming your upload script is named 'src/upload_dropbox_file.py'
python3 src/upload_dropbox_file.py \
    "$LOCAL_OUTPUT_FILE_PATH" \
    "$DROPBOX_UPLOAD_FOLDER" \
    "$REFRESH_TOKEN" \
    "$APP_KEY" \
    "$APP_SECRET"

# Verify the upload (by checking the exit code of the Python script)
if [ $? -eq 0 ]; then
    echo "‚úÖ Successfully initiated upload of ${LOCAL_OUTPUT_FILE_PATH} to Dropbox."
else
    echo "‚ùå ERROR: Failed to upload ${LOCAL_OUTPUT_FILE_PATH} to Dropbox."
    exit 1
fi



